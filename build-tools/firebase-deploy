#!/usr/bin/env bash

main() {
	set -euo pipefail
	on_ci && set -x
	local channel result urls environ

	if (($# > 2)); then
		exit_error "usage [ENV=stage [CHANNEL=dev]]"
	fi

	on_ci && setup_ci_creds

	environ=$(get_environment "${1:-stage}") || exit $?
	channel=$(get_channel "${2:-}")

	rm -rf out/firebase
	cp -r firebase out/

	if [[ "${channel}" == "live" ]]; then
		local domain
		[[ "${environ}" == "prod" ]] && domain="evy.dev" || domain="evystage.dev"
		go run ./build-tools/site-gen --cache-bust --domain="$domain" frontend out/firebase/public
		# `firebase deploy` must be used with live channel
		firebase --config out/firebase/firebase.json --project "${environ}" deploy --only hosting
		on_ci && make_env_urls "${environ}" >>"$GITHUB_ENV"
		exit 0
	fi

	go run ./build-tools/site-gen frontend out/firebase/public
	# `firebase hosting:channel:deploy` must be used with preview/non-live channels
	result=$(firebase --json --config out/firebase/firebase.json --project "${environ}" hosting:channel:deploy "${channel}")
	check_deploy_error "${result}"
	urls=$(get_urls "${result}")
	printf "Deployed to \n%s\n" "${urls}"

	on_pr && post_pr_comment "${urls}"
	on_ci && make_pr_urls "${result}" >>"$GITHUB_ENV"
	exit 0
}

on_ci() {
	[[ -n "${CI:-}" ]]
}

on_pr() {
	on_ci && [[ "${GITHUB_REF:-}" == refs/pull/* ]]
}

setup_ci_creds() {
	if [ -z "${FIREBASE_SERVICE_ACCOUNT}" ]; then
		exit_error "FIREBASE_SERVICE_ACCOUNT environment variable must be set on CI."
	fi
	export GOOGLE_APPLICATION_CREDENTIALS=out/gac.json
	printenv FIREBASE_SERVICE_ACCOUNT >"${GOOGLE_APPLICATION_CREDENTIALS}"
}

get_environment() {
	local environ="$1"
	if [[ "${environ}" != "stage" && "${environ}" != "default" && "${environ}" != "prod" ]]; then
		exit_error "unknown environment: ${environ} (expected: stage, default or prod)"
	fi
	echo "${environ}"
}

get_channel() {
	local channel="$1"
	if [[ -n "${channel}" ]]; then
		echo "${channel}"
	elif on_pr; then
		get_pr_num
	elif on_ci; then
		echo "live"
	else
		echo "dev"
	fi
}

get_pr_num() {
	local pr_num=${GITHUB_REF:-unknown-pr} # GITHUB_REF == "refs/pull/:PR_NUM/merge"
	pr_num=${pr_num#refs/pull/}
	pr_num=${pr_num%/merge}
	echo "${pr_num}"
}

check_deploy_error() {
	local result="$1" status
	status=$(jq -r '.status' <<<"${result}")
	if [[ "${status}" == "error" ]]; then
		error_msg=$(jq -r '.error' <<<"${result}")
		exit_error "${error_msg}"
	fi
	if [[ "${status}" != "success" ]]; then
		exit_error "unknown status: ${result}"
	fi
}

# get_urls extracts key (target name) and URL from deployment result
#  For example get_urls called with the following deployment result:
#
#       {
#         "status": "success",
#         "result": {
#           "apex": {
#             "url": "https://evy-lang-stage--dev-hx5gnhrl.web.app",
#             //....
#           },
#           "docs": {
#             "url": "https://evy-lang-stage-docs--dev-d5kp6w0d.web.app"
#           },
#           // ...
#         }
#       }
#
#  returns
#
#      - apex: https://evy-lang-stage--dev-hx5gnhrl.web.app
#      - docs: https://evy-lang-stage-docs--dev-d5kp6w0d.web.app
get_urls() {
	local result="$1"
	jq -r '.result | to_entries[] | "- \(.key): \(.value.url)"' <<<"${result}"
}

post_pr_comment() {
	local urls="$1" sha body comment_id pr_num
	sha=$(git rev-parse "origin/${GITHUB_HEAD_REF}")
	body="firebase-deployment for ${sha}"
	body+=$'\n\n'
	body+="${urls}"
	body+=$'\n\n<!--- bot:firebase-urls --->' # marker to find correct comment for update
	pr_num=$(get_pr_num)

	comment_id=$(
		gh api -H "Accept: application/vnd.github+json" "/repos/evylang/evy/issues/${pr_num}/comments" |
			jq 'map(select(.body | contains ("<!--- bot:firebase-urls --->"))) | .[] .id' |
			head -n1
	)
	if [[ -z "${comment_id}" ]]; then
		# create new comment
		gh pr comment "${pr_num}" --body "${body}"
		return
	fi
	# update comment
	gh api --method PATCH -H "Accept: application/vnd.github+json" \
		"/repos/evylang/evy/issues/comments/${comment_id}" \
		-f body="${body}"
}

make_env_urls() {
	local env="$1"
	# Generate URLs for the deployment environment for a live firebase site, with an
	# APEX url and a bunch of subdomain URLS.

	local -A domains=([stage]=evystage.dev [prod]=evy.dev)
	local subdomains=(discord docs learn play)
	local domain="${domains[${env}]?"Unknown environment: '${env}'. Must be one of: ${!domains[*]}"}"

	printf 'BASEURL_APEX=https://%s\n' "${domain}"
	for sub in "${subdomains[@]}"; do
		printf 'BASEURL_%s=https://%s.%s\n' "${sub^^}" "${sub}" "${domain}"
	done
}

make_pr_urls() {
	local json_result="$1"
	# The following jq command generates the following output from a firebase deployment result:
	# BASEURL_APEX=https://evy-lang-stage--dev-mtnwzsbm.web.app
	# BASEURL_DISCORD=https://evy-lang-stage-discord--dev-pap726z0.web.app
	# BASEURL_DOCS=https://evy-lang-stage-docs--dev-62qb1rk7.web.app
	# BASEURL_LEARN=https://evy-lang-stage-learn--dev-txkb2kn8.web.app
	# BASEURL_PLAY=https://evy-lang-stage-play--dev-t9r8zjux.web.app
	jq -r '.result.[] | "BASEURL_\(.target | ascii_upcase)=\(.url)"' <<<"${json_result}"
}

exit_error() {
	echo "$*" >&2
	exit 1
}

# Only run main if executed as a script and not sourced.
if [[ "${BASH_SOURCE[0]}" == "$0" ]]; then main "$@"; fi
