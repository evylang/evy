// Input to this function is a string containing multiple groups of nested
// parentheses. Your goal is to separate those group into separate strings
// and return the list of those. Separate groups are balanced (each open
// brace is properly closed) and not nested within each other Ignore any
// spaces in the input string.
//  separateParenGroups "( ) (( )) (( )( ))" // ["()" "(())" "(()())"]
func separateParenGroups:[]string paren_string:string
    result:[]string
    current_string:string
    current_depth:num
    current_depth = 0

    for c := range (len paren_string)
        if paren_string[c] == "("
            current_depth = current_depth + 1
            current_string = current_string + paren_string[c]
        else if paren_string[c] == ")"
            current_depth = current_depth - 1
            current_string = current_string + paren_string[c]

            if current_depth == 0
                result = result + [current_string]
                current_string = ""
            end
        end
    end

    return result
end

func test
    assert ["(()())" "((()))" "()" "((())()())"] (separateParenGroups "(()()) ((())) () ((())()())")
    assert ["()" "(())" "((()))" "(((())))"] (separateParenGroups "() (()) ((())) (((())))")
    assert ["(()(())((())))"] (separateParenGroups "(()(())((())))")
    assert ["()" "(())" "(()())"] (separateParenGroups "( ) (( )) (( )( ))")
end

// Test boilerplate
fails := 0
total := 0

func assert want:any got:any
    total = total + 1
    if want == got
        return
    end
    wantType := (typeof want)[:2]
    gotType := (typeof got)[:2]
    if (wantType == "[]" or wantType == "{}") and wantType == gotType and (len want) == 0 and (len got) == 0
        return
    end
    fails = fails + 1
    printf "want != got:\n want: %v\n got:  %v\n" want got
end

func printResult
    printf "%2.f of %2.f tests passed\n" (total - fails) total
end

test
printResult
