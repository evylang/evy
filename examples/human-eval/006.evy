// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.
// For each of the group, output the deepest level of nesting of parentheses.
// E.g. (()()) has maximum two levels of nesting while ((())) has three.
// parseNestedParens "(()()) ((())) () ((())()())" // [2 3 1 3]
func parse_paren_group:num s:string
    depth:num
    max_depth:num
    for c := range s
        if c == "("
            depth = depth + 1
            max_depth = max depth max_depth
        else
            depth = depth - 1
        end
    end
    return max_depth
end

func parseNestedParens:[]num paren_string:string
    result:[]num
    for x := range (split paren_string " ")
        if x != ""
            result = result + [(parse_paren_group x)]
        end
    end
    return result
end

func test
    assert [2 3 1 3] (parseNestedParens "(()()) ((())) () ((())()())")
    assert [1 2 3 4] (parseNestedParens "() (()) ((())) (((())))")
    assert [4] (parseNestedParens "(()(())((())))")
end

// Test boilerplate
fails := 0
total := 0

func assert want:any got:any
    total = total + 1
    if want == got
        return
    end
    wantType := (typeof want)[:2]
    gotType := (typeof got)[:2]
    if (wantType == "[]" or wantType == "{}") and wantType == gotType and (len want) == 0 and (len got) == 0
        return
    end
    fails = fails + 1
    printf "want != got:\n want: %v\n got:  %v\n" want got
end

func printResult
    printf "%2.f of %2.f tests passed\n" (total - fails) total
end

test
printResult
