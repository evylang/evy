// Test if given string is a palindrome
func isPalindrome:bool str:string
    return str == (reverse str)
end

// Find the shortest palindrome that begins with a supplied string.
// Algorithm idea is simple:
// - Find the longest postfix of supplied string that is a palindrome.
// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
//
//    makePalindrome("") // ""
//    makePalindrome("cat") // "catac"
//    makePalindrome("cata") // "catac"
func makePalindrome:string str:string
    if str == ""
        return ""
    end
    beginning_of_suffix := 0
    while !(isPalindrome str[beginning_of_suffix:])
        beginning_of_suffix = beginning_of_suffix + 1
    end
    return str + (reverse str[:beginning_of_suffix])
end

func reverse:string str:string
    reversed := ""
    for i := range (len str)
        reversed = str[i] + reversed
    end
    return reversed
end

func testAll
    test "" (makePalindrome "")
    test "x" (makePalindrome "x")
    test "xyzyx" (makePalindrome "xyz")
    test "xyx" (makePalindrome "xyx")
    test "catac" (makePalindrome "cata")
    test "jerryrrej" (makePalindrome "jerry")
end

testAll
