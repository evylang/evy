// Input is a space-delimited string of numerals from "zero" to "nine".
// Valid choices are "zero", "one", "two", "three", "four", "five", "six", "seven", "eight" and "nine".
// Return the string with numbers sorted from smallest to largest
// sortNumbers "three one five" // "one three five"
func sortNumbers:string numbers:string
    map := {zero:0 one:1 two:2 three:3 four:4 five:5 six:6 seven:7 eight:8 nine:9}
    arr := split numbers " "
    // bubble sort
    for endIdx := range (len arr)-1 0 -1
        for i := range endIdx
            if map[arr[i]] > map[arr[i + 1]]
                tmp := arr[i]
                arr[i] = arr[i + 1]
                arr[i + 1] = tmp
            end
        end
    end
    return join arr " "
end

func test
    assert "" (sortNumbers "")
    assert "three" (sortNumbers "three")
    assert "three five nine" (sortNumbers "three five nine")
    assert "zero four five seven eight nine" (sortNumbers "five zero four seven nine eight")
    assert "zero one two three four five six" (sortNumbers "six five four three two one zero")
end

// Test boilerplate
fails := 0
total := 0

func assert want:any got:any
    total = total + 1
    if want == got
        return
    end
    wantType := (typeof want)[:2]
    gotType := (typeof got)[:2]
    if (wantType == "[]" or wantType == "{}") and wantType == gotType and (len want) == 0 and (len got) == 0
        return
    end
    fails = fails + 1
    printf "want != got:\n want: %v\n got:  %v\n" want got
end

func printResult
    printf "%2.f of %2.f tests passed\n" (total - fails) total
end

test
printResult

