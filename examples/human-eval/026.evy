//  From an array of integers, remove all elements that occur more than once.
//  Keep order of elements left the same as in the input.
//  removeDuplicates [1 2 3 2 4] //  [1 3 4]
func removeDuplicates:[]num nums:[]num
    seen:{}bool
    dups:{}bool
    result:[]num
    for n := range nums
        ns := sprint n
        if has seen ns
            dups[ns] = true
        end
        seen[ns] = true
    end
    for n := range nums
        ns := sprint n
        if !(has dups ns)
            result = result + [n]
        end
    end
    return result
end

func test
    assert [] (removeDuplicates [])
    assert [1 2 3 4] (removeDuplicates [1 2 3 4])
    assert [1 4 5] (removeDuplicates [1 2 3 2 4 3 5])
end

// Test boilerplate
fails := 0
total := 0

func assert want:any got:any
    total = total + 1
    if want == got
        return
    end
    wantType := (typeof want)[:2]
    gotType := (typeof got)[:2]
    if (wantType == "[]" or wantType == "{}") and wantType == gotType and (len want) == 0 and (len got) == 0
        return
    end
    fails = fails + 1
    printf "want != got:\n want: %v\n got:  %v\n" want got
end

func printResult
    printf "%2.f of %2.f tests passed\n" (total - fails) total
end

test
printResult

