//  returns encoded string by cycling groups of three characters.
func encode:string s:string
    // split string to groups. Each of length 3.
    groups := group3 s
    for i := range (len groups)
        if (len groups[i]) == 3
            g := groups[i]
            groups[i] = g[1:] + g[0]
        end
    end
    return join groups ""
end

//  takes as input string encoded with encode function. Returns decoded string.
func decode:string s:string
    groups := group3 s
    for i := range (len groups)
        if (len groups[i]) == 3
            g := groups[i]
            groups[i] = g[-1] + g[:-1]
        end
    end
    return join groups ""
end

func group3:[]string s:string
    result:[]string
    for i := range (floor ((len s) + 2)/3)
        startIdx := 3 * i
        endIdx := min 3*i+3 (len s)
        g := s[startIdx:endIdx]
        result = result + [g]
    end
    return result
end

func test
    s := "lorem ipsum"
    assert s (decode (encode s))
    assert "bca" (encode "abc")
    assert "abc" (decode "bca")
    assert "bcad" (encode "abcd")
    assert "abcd" (decode "bcad")
end

test
