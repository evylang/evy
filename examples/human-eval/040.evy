// tripleSumZero takes an array of integers as an input.
// it returns True if there are three distinct elements in the list that
// sum to zero, and False otherwise.
// tripleSumZero [1 3 5 0] // false
// tripleSumZero [1 3 -2 1] // true
// tripleSumZero [1 2 3 7] // false
// tripleSumZero [2 4 -5 3 9 7] // true
// tripleSumZero [1] // false
func tripleSumZerol:bool nums:[]num
    length := len nums
    for i := range length
        for j := range i+1 length
            for k := range j+1 length
                if nums[i] + nums[j] + nums[k] == 0
                    return true
                end
            end
        end
    end
    return false
end

func test
    assert false (tripleSumZerol [1 3 5 0])
    assert false (tripleSumZerol [1 3 5 -1])
    assert true (tripleSumZerol [1 3 -2 1])
    assert false (tripleSumZerol [1 2 3 7])
    assert false (tripleSumZerol [1 2 5 7])
    assert true (tripleSumZerol [2 4 -5 3 9 7])
    assert false (tripleSumZerol [1])
    assert false (tripleSumZerol [1 3 5 -100])
    assert false (tripleSumZerol [100 3 5 -100])

end

// Test boilerplate
fails := 0
total := 0

func assert want:any got:any
    total = total + 1
    if want == got
        return
    end
    wantType := (typeof want)[:2]
    gotType := (typeof got)[:2]
    if (wantType == "[]" or wantType == "{}") and wantType == gotType and (len want) == 0 and (len got) == 0
        return
    end
    fails = fails + 1
    printf "want != got:\n want: %v\n got:  %v\n" want got
end

func printResult
    printf "%2.f of %2.f tests passed\n" (total - fails) total
end

test
printResult
