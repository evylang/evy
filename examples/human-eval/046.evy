// The Fib4 number sequence is a sequence similar to the Fibonacci sequence that's defined as follows:
// fib4 0 // 0
// fib4 1 // 0
// fib4 2 // 2
// fib4 3 // 0
// fib4 n // (fib4 n-1) + (fib4 n-2) + (fib4 n-3) + (fib4 n-4).
// Please write a function to efficiently compute the n-th element of the
func fib4:num n:num
    result := [0 0 2 0]
    if n < 4
        return result[n]
    end
    for range n-3
        result = result + [result[-1]+result[-2]+result[-3]+result[-4]]
    end
    return result[-1]
end

func test
    assert 4 (fib4 5)
    assert 28 (fib4 8)
    assert 104 (fib4 10)
    assert 386 (fib4 12)
end

// Test boilerplate
fails := 0
total := 0

func assert want:any got:any
    total = total + 1
    if want == got
        return
    end
    wantType := (typeof want)[:2]
    gotType := (typeof got)[:2]
    if (wantType == "[]" or wantType == "{}") and wantType == gotType and (len want) == 0 and (len got) == 0
        return
    end
    fails = fails + 1
    printf "want != got:\n want: %v\n got:  %v\n" want got
end

func printResult
    printf "%2.f of %2.f tests passed\n" (total - fails) total
end

test
printResult
