// Return the largest prime factor of n. Assume n > 1 and is not a prime.
// largestPrimeFactor 13195 // 29
// largestPrimeFactor 2048 // 2
func largestPrimeFactor:num n:num
    result := -1
    for i := range 2 n
        if n % i == 0 and (isPrime i)
            result = i
        end
    end
    return result
end

func isPrime:bool n:num
    if n < 2
        return false
    end
    for i := range 2 (sqrt n)+1
        if n % i == 0
            return false
        end
    end
    return true
end

func test
    assert 5 (largestPrimeFactor 15)
    assert 3 (largestPrimeFactor 27)
    assert 7 (largestPrimeFactor 63)
    assert 11 (largestPrimeFactor 330)
    assert 29 (largestPrimeFactor 13195)
end

// Test boilerplate
fails := 0
total := 0

func assert want:any got:any
    total = total + 1
    if want == got
        return
    end
    wantType := (typeof want)[:2]
    gotType := (typeof got)[:2]
    if (wantType == "[]" or wantType == "{}") and wantType == gotType and (len want) == 0 and (len got) == 0
        return
    end
    fails = fails + 1
    printf "want != got:\n want: %v\n got:  %v\n" want got
end

func printResult
    printf "%2.f of %2.f tests passed\n" (total - fails) total
end

test
printResult
