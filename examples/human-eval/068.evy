// Given an array representing a branch of a tree that has non-negative
// integer nodes your task is to pluck one of the nodes and return it. The
// plucked node should be the node with the smallest even value. If multiple
// nodes with the same smallest even value are found return the node that has
// smallest index.
//
// The plucked node should be returned in an array, [ smalest_value, its index ],
// If there are no even values or the given array is empty, return [].
//
// Example 1:
//   Input: [4 2 3]
//   Output: [2 1]
//   Explanation: 2 has the smallest even value, and 2 has the smallest index.
//
// Example 2:
//   Input: [1 2 3]
//   Output: [2 1]
//   Explanation: 2 has the smallest even value, and 2 has the smallest index.
//
// Example 3:
//   Input: []
//   Output: []
//
// Example 4:
//   Input: [5, 0, 3, 0, 4, 2]
//   Output: [0, 1]
//   Explanation: 0 is the smallest value, but  there are two zeros,
//   so we will choose the first zero, which has the smallest index.
//
// Constraints:
//     1 <= len(nodes) <= 10000
//     0 <= val
func pluck:[]num nums:[]num
    idx := -1
    val := -1
    for i := range (len nums)
        n := nums[i]
        if n % 2 == 0 and (val == -1 or n < val)
            idx = i
            val = n
        end
    end
    if idx == -1
        return []
    end
    return [val idx]
end

func test
    assert [2 1] (pluck [4 2 3])
    assert [2 1] (pluck [1 2 3])
    assert [] (pluck [])
    assert [0 1] (pluck [5 0 3 0 4 2])
    assert [0 3] (pluck [1 2 3 0 5 3])
    assert [4 1] (pluck [5 4 8 4 8])
    assert [6 1] (pluck [7 6 7 1])
    assert [] (pluck [7 9 7 1])
end

test
