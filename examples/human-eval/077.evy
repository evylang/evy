// Write a function that takes an number a and returns true
// if this number is a cube of some integer number.
// Note: you may assume the input is always valid.
// Examples:
// iscube 1 // true
// iscube 2 // false
// iscube -1 // true
// iscube 64 // true
// iscube 0 // true
// iscube 180 // false
func iscube:bool n:num
    if n < 0
        n = -n //abs
    end
    cuberoot := pow n 1/3
    n2 := pow (round cuberoot) 3
    return (round n2) == n
end

func test
    assert true (iscube 1)
    assert false (iscube 2)
    assert true (iscube -1)
    assert true (iscube 64)
    assert false (iscube 180)
    assert true (iscube 1000)
    assert true (iscube 0)
    assert false (iscube 1729)
end

// Test boilerplate
fails := 0
total := 0

func assert want:any got:any
    total = total + 1
    if want == got
        return
    end
    wantType := (typeof want)[:2]
    gotType := (typeof got)[:2]
    if (wantType == "[]" or wantType == "{}") and wantType == gotType and (len want) == 0 and (len got) == 0
        return
    end
    fails = fails + 1
    printf "want != got:\n want: %v\n got:  %v\n" want got
end

func printResult
    printf "%2.f of %2.f tests passed\n" (total - fails) total
end

test
printResult
