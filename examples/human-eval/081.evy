//  It is the last week of the semester and the teacher has to give the grades
//  to students. The teacher has been making her own algorithm for grading.
//  The only problem is, she has lost the code she used for grading.
//  She has given you an array of GPAs for some students and you have to write
//  a function that can output an array of letter grades using the following table:
//           GPA       |    Letter grade
//            4.0                A+
//          > 3.7                A
//          > 3.3                A-
//          > 3.0                B+
//          > 2.7                B
//          > 2.3                B-
//          > 2.0                C+
//          > 1.7                C
//          > 1.3                C-
//          > 1.0                D+
//          > 0.7                D
//          > 0.0                D-
//            0.0                E
//  Example:
//  grade_equation [4 3 1.7 2 3.5]  // ["A+" "B" "C-" "C" "A-"]
func grades:[]string gpas:[]num
    result:[]string
    for gpa := range gpas
        result = result + [(grade gpa)]
    end
    return result
end

func grade:string gpa:num
    if gpa == 4
        return "A+"
    else if gpa > 3.7
        return "A"
    else if gpa > 3.3
        return "A-"
    else if gpa > 3
        return "B+"
    else if gpa > 2.7
        return "B"
    else if gpa > 2.3
        return "B-"
    else if gpa > 2
        return "C+"
    else if gpa > 1.7
        return "C"
    else if gpa > 1.3
        return "C-"
    else if gpa > 1
        return "D+"
    else if gpa > 0.7
        return "D"
    else if gpa > 0
        return "D-"
    else if gpa == 0
        return "E"
    end
    return sprint "invalid gpa" gpa
end

func test
    assert ["A+" "B" "C-" "C" "A-"] (grades [4 3 1.7 2 3.5])
    assert ["D+"] (grades [1.2])
    assert ["D-"] (grades [0.5])
    assert ["E"] (grades [0])
    assert ["D" "D-" "C-" "B" "B+"] (grades [1 0.3 1.5 2.8 3.3])
    assert ["E" "D-"] (grades [0 0.7])
end

// Test boilerplate
fails := 0
total := 0

func assert want:any got:any
    total = total + 1
    if want == got
        return
    end
    wantType := (typeof want)[:2]
    gotType := (typeof got)[:2]
    if wantType == "[]" or wantType == "{}" and wantType == gotType and (len want) == 0 and (len got) == 0
        return
    end
    fails = fails + 1
    printf "want != got:\n want: %v\n got:  %v\n" want got
end

func printResult
    printf "%2.f of %2.f tests passed\n" (total - fails) total
end

test
printResult
