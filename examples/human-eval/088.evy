// Given an array of non-negative integers, return a copy of the given array
// after sorting, you will sort the given array in ascending order if the sum
// of first index value and last index value is odd, or sort it in descending
// order if the sum  of first index value and last index value is even.
//
// Note: don't change the given array.
// sortArray [] // []
// sortArray [5] // [5]
// sortArray [2 4 3 0 1 5] // [0 1 2 3 4 5]
// sortArray [2 4 3 0 1 5 6] // [6 5 4 3 2 1 0]
func sortArray:[]num nums:[]num
    if (len nums) <= 1
        return nums
    end
    result := nums[:]
    asc := (nums[0] + nums[-1]) % 2 == 1
    sort result asc
    return result
end

func sort arr:[]num asc:bool
    // bubble sort
    for endIdx := range (len arr)-1 0 -1
        for i := range endIdx
            if (asc and arr[i] > arr[i + 1]) or (!asc and arr[i] < arr[i + 1])
                tmp := arr[i]
                arr[i] = arr[i + 1]
                arr[i + 1] = tmp
            end
        end
    end
end

func test
    assert [] (sortArray [])
    assert [5] (sortArray [5])
    assert [0 1 2 3 4 5] (sortArray [2 4 3 0 1 5])
    assert [6 5 4 3 2 1 0] (sortArray [2 4 3 0 1 5 6])
    assert [1 2] (sortArray [2 1])
    assert [0 11 15 32 42 87] (sortArray [15 42 87 32 11 0])
    assert [23 21 14 11] (sortArray [21 14 23 11])
end

// Test boilerplate
fails := 0
total := 0

func assert want:any got:any
    total = total + 1
    if want == got
        return
    end
    wantType := (typeof want)[:2]
    gotType := (typeof got)[:2]
    if wantType == "[]" or wantType == "{}" and wantType == gotType and (len want) == 0 and (len got) == 0
        return
    end
    fails = fails + 1
    printf "want != got:\n want: %v\n got:  %v\n" want got
end

func printResult
    printf "%2.f of %2.f tests passed\n" (total - fails) total
end

test
printResult
