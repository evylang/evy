// Given an array of integers find the largest prime value and return the sum
// of its digits.
// largestPrimeSumOfDigits [0 3 2 1 3 5 7 4 5 5 5 2 181 32 4 32 3 2 32 324 4 3] // 10
// largestPrimeSumOfDigits [1 0 1 8 2 4597 2 1 3 40 1 2 1 2 4 2 5 1] // 25
// largestPrimeSumOfDigits [1 3 1 32 5107 34 83278 109 163 23 2323 32 30 1 9 3] // 13
// largestPrimeSumOfDigits [0 724 32 71 99 32 6 0 5 91 83 0 5 6] // 11
// largestPrimeSumOfDigits [0 81 12 3 1 21] // 3
// largestPrimeSumOfDigits [0 8 1 2 1 7] // 7
func largestPrimeSumOfDigits:num nums:[]num
    largest := 0
    for n := range nums
        if (isPrime n) and n > largest
            largest = n
        end
    end
    return sumOfDigits largest
end

func isPrime:bool n:num
    if n < 2
        return false
    end
    for i := range 2 n
        if n % i == 0
            return false
        end
    end
    return true
end

func sumOfDigits:num n:num
    result := 0
    while n > 0
        result = result + n % 10
        n = floor n/10
    end
    return result
end

func test
    assert 10 (largestPrimeSumOfDigits [0 3 2 1 3 5 7 4 5 5 5 2 181 32 4 32 3 2 32 324 4 3])
    assert 25 (largestPrimeSumOfDigits [1 0 1 8 2 4597 2 1 3 40 1 2 1 2 4 2 5 1])
    assert 13 (largestPrimeSumOfDigits [1 3 1 32 5107 34 83278 109 163 23 2323 32 30 1 9 3])
    assert 11 (largestPrimeSumOfDigits [0 724 32 71 99 32 6 0 5 91 83 0 5 6])
    assert 3 (largestPrimeSumOfDigits [0 81 12 3 1 21])
    assert 7 (largestPrimeSumOfDigits [0 8 1 2 1 7])
end

// Test boilerplate
fails := 0
total := 0

func assert want:any got:any
    total = total + 1
    if want == got
        return
    end
    wantType := (typeof want)[:2]
    gotType := (typeof got)[:2]
    if wantType == "[]" or wantType == "{}" and wantType == gotType and (len want) == 0 and (len got) == 0
        return
    end
    fails = fails + 1
    printf "want != got:\n want: %v\n got:  %v\n" want got
end

func printResult
    printf "%2.f of %2.f tests passed\n" (total - fails) total
end

test
printResult
