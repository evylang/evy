// Given a dictionary, return true if all keys are strings in lower
// case or all keys are strings in upper case, else return false.
// The function should return false if the given dictionary is empty.
// sameCaseKey {"a":"apple", "b":"banana"} // true
// sameCaseKey {"a":"apple", "A":"banana", "B":"banana"} // false
// sameCaseKey {"a":"apple", 8:"banana", "a":"apple"} // false
// sameCaseKey {"Name":"John", "Age":"36", "City":"Houston"} // false
// sameCaseKey {"STATE":"NC", "ZIP":"12345" } // true
func sameCaseKey:bool m:{}string
    up := false
    low := false
    for key := range m
        lkey := lower key
        ukey := upper key
        if key == lkey and key != ukey
            low = true
        else if key == ukey and key != lkey
            up = true
        else
            return false // no letters in key
        end
    end
    return up != low
end

func test
    assert true (sameCaseKey {p:"pineapple" b:"banana"})
    assert false (sameCaseKey {p:"pineapple" A:"banana" B:"banana"})
    assert false (sameCaseKey {p:"pineapple" _:"banana" a:"apple"})
    assert false (sameCaseKey {Name:"John" Age:"36" City:"Houston"})
    assert true (sameCaseKey {STATE:"NC" ZIP:"12345"})
    assert true (sameCaseKey {fruit:"Orange" taste:"Sweet"})
end

// Test boilerplate
fails := 0
total := 0

func assert want:any got:any
    total = total + 1
    if want == got
        return
    end
    wantType := (typeof want)[:2]
    gotType := (typeof got)[:2]
    if wantType == "[]" or wantType == "{}" and wantType == gotType and (len want) == 0 and (len got) == 0
        return
    end
    fails = fails + 1
    printf "want != got:\n want: %v\n got:  %v\n" want got
end

func printResult
    printf "%2.f of %2.f tests passed\n" (total - fails) total
end

test
printResult
