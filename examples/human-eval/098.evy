//  Given a string s, count the number of uppercase vowels in even indices.
//  For example:
//  countUpper "aBCdEf" // 1
//  countUpper "abcdefg" // 0
//  countUpper "dBBE" // 0
func countUpper:num s:string
    m := {A:0 E:0 I:0 O:0 U:0}
    result := 0
    for i := range 0 (len s) 2
        if has m s[i]
            result = result + 1
        end
    end
    return result
end

func test
    assert 1 (countUpper "aBCdEf")
    assert 0 (countUpper "abcdefg")
    assert 0 (countUpper "dBBE")
    assert 0 (countUpper "B")
    assert 1 (countUpper "U")
    assert 0 (countUpper "")
    assert 2 (countUpper "EEEE")
end

// Test boilerplate
fails := 0
total := 0

func assert want:any got:any
    total = total + 1
    if want == got
        return
    end
    wantType := (typeof want)[:2]
    gotType := (typeof got)[:2]
    if wantType == "[]" or wantType == "{}" and wantType == gotType and (len want) == 0 and (len got) == 0
        return
    end
    fails = fails + 1
    printf "want != got:\n want: %v\n got:  %v\n" want got
end

func printResult
    printf "%2.f of %2.f tests passed\n" total-fails total
end

test
printResult
