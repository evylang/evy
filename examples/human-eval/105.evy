// Given an array of integers, sort the integers that are between 1 and 9 inclusive,
// reverse the resulting array, and then replace each digit by its corresponding name from
// "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
// For example:
//   arr = [2 1 1 4 5 8 2 3]
//         -> sort arr -> [1 1 2 2 3 4 5 8]
//         -> reverse arr -> [8 5 4 3 2 2 1 1]
//   return ["Eight" "Five" "Four" "Three" "Two" "Two" "One" "One"]

//   If the array is empty return an empty array:
//   arr = []
//   return []

//   If the array has any strange number ignore it:
//   arr = [1 -1  55]
//         -> sort arr -> [-1 1 55]
//         -> reverse arr -> [55 1 -1]
//   return = ['One']
func solve:[]string nums:[]num
    names := ["Zero" "One" "Two" "Three" "Four" "Five" "Six" "Seven" "Eight" "Nine"]
    nums2:[]num
    for n := range nums
        if n > 0 and n < 10
            nums2 = nums2 + [n]
        end
    end
    sort nums2
    result:[]string
    for n := range nums2
        result = result + [names[n]]
    end
    return result
end

func sort arr:[]num
    // bubble sort, descending
    for endIdx := range (len arr)-1 0 -1
        for i := range endIdx
            if arr[i] < arr[i + 1]
                tmp := arr[i]
                arr[i] = arr[i + 1]
                arr[i + 1] = tmp
            end
        end
    end
end

func test
    assert ["Eight" "Five" "Four" "Three" "Two" "Two" "One" "One"] (solve [2 1 1 4 5 8 2 3])
    assert [] (solve [])
    assert ["One"] (solve [1 -1 55])
    assert ["Three" "Two" "One"] (solve [1 -1 3 2])
    assert ["Nine" "Eight" "Four"] (solve [9 4 8])

end

// Test boilerplate
fails := 0
total := 0

func assert want:any got:any
    total = total + 1
    if want == got
        return
    end
    wantType := (typeof want)[:2]
    gotType := (typeof got)[:2]
    if (wantType == "[]" or wantType == "{}") and wantType == gotType and (len want) == 0 and (len got) == 0
        return
    end
    fails = fails + 1
    printf "want != got:\n want: %v\n got:  %v\n" want got
end

func printResult
    printf "%2.f of %2.f tests passed\n" (total - fails) total
end

test
printResult
