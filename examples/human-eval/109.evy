// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The
// numbers in the array will be randomly ordered. Your task is to determine if
// it is possible to get an array sorted in non-decreasing order by performing
// the following operation on the given array:
//     You are allowed to perform right shift operation any number of times.
//
// One right shift operation means shifting all elements of the array by one
// position in the right direction. The last element of the array will be moved to
// the starting position in the array i.e. 0th index.
//
// If it is possible to obtain the sorted array by performing the above operation
// then return true else return false.
// If the given array is empty then return true.
//
// Note: The given list is guaranteed to have unique elements.
//
// For Example:
//
// sortedWithShift [3 4 5 1 2] // true
// Explanation: By performing 2 right shift operations non-decreasing order can
//              be achieved for the given array.
// sortedWithShift [3 5 4 1 2]) // false
// Explanation:It is not possible to get non-decreasing order for the given
//             array by performing any number of right shift operations.
func sortedWithShift:bool nums:[]num
    greaterThanNext := 0
    for i := range (len nums)-1
        if nums[i] > nums[i + 1]
            greaterThanNext = greaterThanNext + 1
        end
    end
    return greaterThanNext == 0 or (greaterThanNext == 1 and nums[-1] < nums[0])
end

func test
    assert true (sortedWithShift [3 4 5 1 2])
    assert true (sortedWithShift [3 5 10 1 2])
    assert false (sortedWithShift [4 3 1 2])
    assert false (sortedWithShift [3 5 4 1 2])
    assert true (sortedWithShift [])
    assert true (sortedWithShift [1])
    assert true (sortedWithShift [1 2])
    assert true (sortedWithShift [2 1])
    assert true (sortedWithShift [2 3 1])
    assert false (sortedWithShift [2 1 3])
end

test
