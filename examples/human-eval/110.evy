// In this problem, you will implement a function that takes two lists of numbers,
// and determines whether it is possible to perform an exchange of elements
// between them to make nums1 a list of only even numbers.
// There is no limit on the number of exchanged elements between nums1 and nums2:.
// If it is possible to exchange elements between the nums1 and nums2: to make
// all the elements of nums1 to be even, return "YES".
// Otherwise, return "NO".
// For example:
// solve [1 2 3 4] [1 2 3 4] // "YES"
// solve [1 2 3 4] [1 5 3 4] // "NO"
// It is assumed that the input lists will be non-empty.
func solve:string nums1:[]num nums2:[]num
    odds1 := count nums1 1
    evens2 := count nums2 0
    if odds1 <= evens2
        return "YES"
    end
    return "NO"
end

func count:num nums:[]num remainderMod2:num
    result := 0
    for n := range nums
        if n % 2 == remainderMod2
            result = result + 1
        end
    end
    return result
end

func test
    assert "YES" (solve [1 2 3 4] [1 2 3 4])
    assert "NO" (solve [1 2 3 4] [1 5 3 4])
    assert "YES" (solve [1 2 3 4] [2 1 4 3])
    assert "YES" (solve [5 7 3] [2 6 4])
    assert "NO" (solve [5 7 3] [2 6 3])
    assert "NO" (solve [3 2 6 1 8 9] [3 5 5 1 1 1])
    assert "YES" (solve [100 200] [200 200])
end

// Test boilerplate
fails := 0
total := 0

func assert want:any got:any
    total = total + 1
    if want == got
        return
    end
    wantType := (typeof want)[:2]
    gotType := (typeof got)[:2]
    if (wantType == "[]" or wantType == "{}") and wantType == gotType and (len want) == 0 and (len got) == 0
        return
    end
    fails = fails + 1
    printf "want != got:\n want: %v\n got:  %v\n" want got
end

func printResult
    printf "%2.f of %2.f tests passed\n" (total - fails) total
end

test
printResult
