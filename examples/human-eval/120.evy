//  Given an array arr of integers and a positive integer k, return a sorted list
//  of length k with the maximum k numbers in arr.
//
//  Example 1:
//
//      Input: arr = [-3 -4 5] k = 3
//      Output: [-4 -3 5]
//
//  Example 2:
//
//      Input: arr = [4 -4 4] k = 2
//      Output: [4 4]
//
//  Example 3:
//
//      Input: arr = [-3 2 1 2 -1 -2 1] k = 1
//      Output: [2]
//
//  Note:
//      1. The length of the array will be in the range of [1 1000].
//      2. The elements in the array will be in the range of [-1000 1000].
//      3. 0 <= k <= len(arr)
func maxArr:[]num nums:[]num n:num
    if n == 0
        return []
    end

    nums = nums[:]
    sort nums
    return nums[-n:]
end

func sort arr:[]num
    // bubble sort
    for endIdx := range (len arr)-1 0 -1
        for i := range endIdx
            if arr[i] > arr[i + 1]
                tmp := arr[i]
                arr[i] = arr[i + 1]
                arr[i + 1] = tmp
            end
        end
    end
end

func test
    assert [-4 -3 5] (maxArr [-3 -4 5] 3)
    assert [4 4] (maxArr [4 -4 4] 2)
    assert [2] (maxArr [-3 2 1 2 -1 -2 1] 1)
    assert [2 20 123] (maxArr [123 -123 20 0 1 2 -3] 3)
    assert [0 1 2 20] (maxArr [-123 20 0 1 2 -3] 4)
    assert [-13 -8 0 0 3 5 15] (maxArr [5 15 0 3 -13 -8 0] 7)
    assert [3 5] (maxArr [-1 0 2 5 3 -10] 2)
    assert [5] (maxArr [1 0 5 -7] 1)
    assert [-4 4] (maxArr [4 -4] 2)
    assert [-10 10] (maxArr [-10 10] 2)
    assert [] (maxArr [1 2 3 -23 243 -400 0] 0)
end

test
