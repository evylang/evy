//  Given a non-empty list of integers, return the sum of all of the odd
//  elements that are in even positions.
//  Examples
//  solve [5 8 7 1] // 12
//  solve [3 3 3 3 3] // 9
//  solve [30 13 24 321] //0
func solve:num nums:[]num
    result := 0
    for i := range 0 (len nums) 2
        if nums[i] % 2 == 1
            result = result + nums[i]
        end
    end
    return result
end

func test
    assert 12 (solve [5 8 7 1])
    assert 9 (solve [3 3 3 3 3])
    assert 0 (solve [30 13 24 321])
    assert 5 (solve [5 9])
    assert 0 (solve [2 4 8])
    assert 23 (solve [30 13 23 32])
    assert 3 (solve [3 13 2 9])
end

// Test boilerplate
fails := 0
total := 0

func assert want:any got:any
    total = total + 1
    if want == got
        return
    end
    wantType := (typeof want)[:2]
    gotType := (typeof got)[:2]
    if (wantType == "[]" or wantType == "{}") and wantType == gotType and (len want) == 0 and (len got) == 0
        return
    end
    fails = fails + 1
    printf "want != got:\n want: %v\n got:  %v\n" want got
end

func printResult
    printf "%2.f of %2.f tests passed\n" (total - fails) total
end

test
printResult
