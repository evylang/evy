// You have to write a function which validates a given date string and
// returns True if the date is valid otherwise False.
// The date is valid if all of the following rules are satisfied:
// 1. The date string is not empty.
// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12.
//   And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11.
//   And, the number of days is not less than 1 or higher than 29 for the month 2.
// 3. The months should not be less than 1 or higher than 12.
// 4. The date should be in the format: mm-dd-yyyy
// for example:
// validateDate "03-11-2000 " // true
// validateDate "15-01-2012" // false
// validateDate "04-0-2040" // false
// validateDate "06-04-2020" // true
// validateDate "06/04/2020" // false
func validateDate:bool d:string
    if (len d) != 10 or d[2] != "-" or d[5] != "-"
        return false
    end
    month := str2num d[:2]
    day := str2num d[3:5]
    str2num d[6]

    if err
        return false
    end
    if day < 1 or day > 31 or month < 1 or month > 12
        return false
    end
    if (month == 4 or month == 6 or month == 9 or month == 11) and day == 31
        return false
    end
    if month == 2 and day > 29
        return false
    end
    return true
end

func test
    assert true (validateDate "03-11-2000")
    assert false (validateDate "15-01-2012")
    assert false (validateDate "04-0-2040")
    assert true (validateDate "06-04-2020")
    assert true (validateDate "01-01-2007")
    assert false (validateDate "03-32-2011")
    assert false (validateDate "")
    assert false (validateDate "04-31-3000")
    assert true (validateDate "06-06-2005")
    assert false (validateDate "21-31-2000")
    assert true (validateDate "04-12-2003")
    assert false (validateDate "04122003")
    assert false (validateDate "20030412")
    assert false (validateDate "2003-04")
    assert false (validateDate "2003-04-12")
    assert false (validateDate "04-2003")
end

// Test boilerplate
fails := 0
total := 0

func assert want:any got:any
    total = total + 1
    if want == got
        return
    end
    wantType := (typeof want)[:2]
    gotType := (typeof got)[:2]
    if (wantType == "[]" or wantType == "{}") and wantType == gotType and (len want) == 0 and (len got) == 0
        return
    end
    fails = fails + 1
    printf "want != got:\n want: %v\n got:  %v\n" want got
end

func printResult
    printf "%2.f of %2.f tests passed\n" (total - fails) total
end

test
printResult
