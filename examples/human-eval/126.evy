// Given a list of numbers, return whether or not they are sorted
// in ascending order. If list has more than 1 duplicate of the same
// number, return False. Assume no negative numbers and only integers.
//
// Examples
// isSorted [5] // True
// isSorted [1 2 3 4 5] // true
// isSorted [1 3 2 4 5] // false
// isSorted [1 2 3 4 5 6] // true
// isSorted [1 2 3 4 5 6 7] // true
// isSorted [1 3 2 4 5 6 7] // false
// isSorted [1 2 2 3 3 4] // true
// isSorted [1 2 2 2 3 4] // false
func isSorted:bool nums:[]num
    if (len nums) < 2
        return true
    end
    nums2 := nums[:] // copy
    sort nums2
    if nums2 != nums
        return false
    end
    last := nums2[0]
    repeats := 0
    for n := range nums2[1:]
        if n == last
            repeats = repeats + 1
            if repeats > 1
                return false
            end
        else
            repeats = 0
            last = n
        end
    end
    return true
end

func sort arr:[]num
    // bubble sort
    for endIdx := range (len arr)-1 0 -1
        for i := range endIdx
            if arr[i] > arr[i + 1]
                tmp := arr[i]
                arr[i] = arr[i + 1]
                arr[i + 1] = tmp
            end
        end
    end
end

func test
    assert true (isSorted [5])
    assert true (isSorted [1 2 3 4 5])
    assert false (isSorted [1 3 2 4 5])
    assert true (isSorted [1 2 3 4 5 6])
    assert true (isSorted [1 2 3 4 5 6 7])
    assert false (isSorted [1 3 2 4 5 6 7])
    assert true (isSorted [])
    assert true (isSorted [1])
    assert false (isSorted [3 2 1])
    assert false (isSorted [1 2 2 2 3 4])
    assert false (isSorted [1 2 3 3 3 4])
    assert true (isSorted [1 2 2 3 3 4])
    assert true (isSorted [1 2 3 4])
end

test
