abc := {a:0 b:1 c:2 d:3 e:4 f:5 g:6 h:7 i:8 j:9 k:10 l:11 m:12 n:13 o:14 p:15 q:16 r:17 s:18 t:19 u:20 v:21 w:22 x:23 y:24 z:25 A:0 B:1 C:2 D:3 E:4 F:5 G:6 H:7 I:8 J:9 K:10 L:11 M:12 N:13 O:14 P:15 Q:16 R:17 S:18 T:19 U:20 V:21 W:22 X:23 Y:24 Z:25}

// Create a function that returns true if the last character
// of a given string is an alphabetical character and is not
// a part of a word, and false otherwise.
// Note: "word" is a group of characters separated by space.
// Examples:
// checkLast "apple pie" // false
// checkLast "apple pi e" // true
// checkLast "apple pi e " // false
// checkLast "" // false
func checkLast:bool s:string
    words := split s " "
    last := words[-1]
    return (len last) == 1 and (has abc last)
end

func test
    assert (checkLast "apple") false
    assert (checkLast "apple pi e") true
    assert (checkLast "eeeee") false
    assert (checkLast "A") true
    assert (checkLast "Pumpkin pie ") false
    assert (checkLast "Pumpkin pie 1") false
    assert (checkLast "") false
    assert (checkLast "eeeee e ") false
    assert (checkLast "apple pie") false
    assert (checkLast "apple pi e ") false
end

// Test boilerplate
fails := 0
total := 0

func assert want:any got:any
    total = total + 1
    if want == got
        return
    end
    wantType := (typeof want)[:2]
    gotType := (typeof got)[:2]
    if (wantType == "[]" or wantType == "{}") and wantType == gotType and (len want) == 0 and (len got) == 0
        return
    end
    fails = fails + 1
    printf "want != got:\n want: %v\n got:  %v\n" want got
end

func printResult
    printf "%2.f of %2.f tests passed\n" (total - fails) total
end

test
printResult
