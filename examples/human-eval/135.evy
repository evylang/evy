//  Create a function which returns the largest index of an element which
//  is not greater than or equal to the element immediately preceding it. If
//  no such element exists then return -1. The given array will not contain
//  duplicate values.
//
//  Examples:
//  solve [1,2,4,3,5] // 3
//  solve [1,2,3] // -1
func solve:num nums:[]num
    length := len nums
    if length < 2
        return -1
    end
    result := -1
    for i := range 1 length
        if nums[i - 1] > nums[i]
            result = i
        end
    end
    return result
end

func test
    assert 3 (solve [1 2 4 3 5])
    assert -1 (solve [1 2 4 5])
    assert 2 (solve [1 4 2 5 6 7 8 9 10])
    assert 4 (solve [4 8 5 7 3])
    assert -1 (solve [])
end

// Test boilerplate
fails := 0
total := 0

func assert want:any got:any
    total = total + 1
    if want == got
        return
    end
    wantType := (typeof want)[:2]
    gotType := (typeof got)[:2]
    if (wantType == "[]" or wantType == "{}") and wantType == gotType and (len want) == 0 and (len got) == 0
        return
    end
    fails = fails + 1
    printf "want != got:\n want: %v\n got:  %v\n" want got
end

func printResult
    printf "%2.f of %2.f tests passed\n" (total - fails) total
end

test
printResult
