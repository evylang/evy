// Create a function that returns an array [a b], where 'a' is
// the largest of negative integers, and 'b' is the smallest
// of positive integers in a list.
// If there is no negative or positive integers, return them as false.
// Examples:
// maxNegMinPos [2 4 1 3 5 7] // [false 1]
// maxNegMinPos [] // [false false]
// maxNegMinPos [0] // [false false]
func maxNegMinPos:[]any nums:[]num
    maxNeg:any
    minPos:any
    for n := range nums
        if n < 0 and ((typeof maxNeg) == "bool" or n > maxNeg.(num))
            maxNeg = n
        end
        if n > 0 and ((typeof minPos) == "bool" or n < minPos.(num))
            minPos = n
        end
    end
    return [maxNeg minPos]
end

func test
    assert [false 1] (maxNegMinPos [2 4 1 3 5 7])
    assert [false 1] (maxNegMinPos [2 4 1 3 5 7 0])
    assert (anyArr [-2 1]) (maxNegMinPos [1 3 2 4 5 6 -2])
    assert (anyArr [-7 2]) (maxNegMinPos [4 5 3 6 2 7 -7])
    assert (anyArr [-9 2]) (maxNegMinPos [7 3 8 4 9 2 5 -9])
    assert (anyArr [false false]) (maxNegMinPos [])
    assert (anyArr [false false]) (maxNegMinPos [0])
    assert [-1 false] (maxNegMinPos [-1 -3 -5 -6])
    assert [-1 false] (maxNegMinPos [-1 -3 -5 -6 0])
    assert (anyArr [-3 1]) (maxNegMinPos [-6 -4 -4 -3 1])
    assert (anyArr [-3 1]) (maxNegMinPos [-6 -4 -4 -3 -100 1])
end

func anyArr:[]any a:[]any
    return a
end

// Test boilerplate
fails := 0
total := 0

func assert want:any got:any
    total = total + 1
    if want == got
        return
    end
    wantType := (typeof want)[:2]
    gotType := (typeof got)[:2]
    if (wantType == "[]" or wantType == "{}") and wantType == gotType and (len want) == 0 and (len got) == 0
        return
    end
    fails = fails + 1
    printf "want != got:\n want: %v\n got:  %v\n" want got
end

func printResult
    printf "%2.f of %2.f tests passed\n" (total - fails) total
end

test
printResult
