// This function will take a list of integers. For all entries in the list,
// the function shall square the integer entry if its index is a multiple of
// 3 and will cube the integer entry if its index is a multiple of 4 and not
// a multiple of 3. The function will not change the entries in the list
// whose indexes are not a multiple of 3 or 4. The function shall then return
// the sum of all entries.
// Examples:
// For lst = [1 2 3] the output should be 6
// For lst = []  the output should be 0
// For lst = [-1 -5 2 -1 -5]  the output should be -126
func solve:num nums:[]num
    result := 0
    for i := range (len nums)
        if i % 3 == 0
            result = result + (pow nums[i] 2)
        else if i % 4 == 0
            result = result + (pow nums[i] 3)
        else
            result = result + nums[i]
        end
    end
    return result
end

func testAll
    test 6 (solve [1 2 3])
    test 14 (solve [1 4 9])
    test 0 (solve [])
    test 9 (solve [1 1 1 1 1 1 1 1 1])
    test -3 (solve [-1 -1 -1 -1 -1 -1 -1 -1 -1])
    test 0 (solve [0])
    test -126 (solve [-1 -5 2 -1 -5])
    test 3030 (solve [-56 -99 1 0 -2])
    test 0 (solve [-1 0 0 0 0 0 0 0 -1])
    test -14196 (solve [-16 -9 -2 36 36 26 -20 25 -40 20 -4 12 -26 35 37])
    test -1448 (solve [-1 -3 17 -1 -15 13 -1 14 -14 -12 -5 14 -14 6 13 11 16 16 4 10])
end

testAll
