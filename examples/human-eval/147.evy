// You are given a positive integer n. You have to create an integer array a of length n.
//     For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.
//     Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,
// and a[i] + a[j] + a[k] is a multiple of 3.
// Example :
//     Input: n = 5
//     Output: 1
//     Explanation:
//     a = [1 3 7 13 21]
//     The only valid triple is [1 7 13].
func triples:num n:num
    arr:[]num
    for i := range 1 n+1
        arr = arr + [i*i-i+1]
    end
    result := 0
    for i := range n
        for j := range i+1 n
            for k := range j+1 n
                if (arr[i] + arr[j] + arr[k]) % 3 == 0
                    result = result + 1
                end
            end
        end
    end
    return result
end

func test
    assert 1 (triples 5)
    assert 4 (triples 6)
    assert 36 (triples 10)
    assert 53361 (triples 100)
end

// Test boilerplate
fails := 0
total := 0

func assert want:any got:any
    total = total + 1
    if want == got
        return
    end
    wantType := (typeof want)[:2]
    gotType := (typeof got)[:2]
    if (wantType == "[]" or wantType == "{}") and wantType == gotType and (len want) == 0 and (len got) == 0
        return
    end
    fails = fails + 1
    printf "want != got:\n want: %v\n got:  %v\n" want got
end

func printResult
    printf "%2.f of %2.f tests passed\n" (total - fails) total
end

test
printResult
