// Write a function that accepts a list of strings as a parameter,
// deletes the strings that have odd lengths from it,
// and returns the resulted list with a sorted order,
// The list is always a list of strings and never an array of numbers,
// and it may contain duplicates.
// The order of the list should be ascending by length of each word, and you
// should return the list sorted by that rule.
// If two words have the same length, sort the list alphabetically.
// The function should return a list of strings in sorted order.
// You may assume that all words will have the same length.
// For example:
// assert list_sort ["aa" "a" "aaa"] // ["aa"]
// assert list_sort ["ab" "a" "aaa" "cd"] // ["ab" "cd"]
func sort:[]string arr:[]string
    result:[]string
    for s := range arr
        if (len s) % 2 == 0
            result = result + [s]
        end
    end

    for endIdx := range (len result)-1 0 -1
        for i := range endIdx
            if comp result[i] result[i + 1]
                tmp := result[i]
                result[i] = result[i + 1]
                result[i + 1] = tmp
            end
        end
    end
    return result
end

func comp:bool s1:string s2:string
    if (len s1) == (len s2)
        return s1 > s2
    end
    return (len s1) > (len s2)
end

func test
    assert ["aa"] (sort ["aa" "a" "aaa"])
    assert ["AI" "asdf" "school"] (sort ["school" "AI" "asdf" "b"])
    assert [] (sort ["d" "b" "c" "a"])
    assert ["abcd" "dcba"] (sort ["d" "dcba" "abcd" "a"])
    assert ["AI" "ai" "au"] (sort ["AI" "ai" "au"])
    assert [] (sort ["a" "b" "b" "c" "c" "a"])
    assert ["cc" "dd" "aaaa" "bbbb"] (sort ["aaaa" "bbbb" "dd" "cc"])
end

// Test boilerplate
fails := 0
total := 0

func assert want:any got:any
    total = total + 1
    if want == got
        return
    end
    wantType := (typeof want)[:2]
    gotType := (typeof got)[:2]
    if (wantType == "[]" or wantType == "{}") and wantType == gotType and (len want) == 0 and (len got) == 0
        return
    end
    fails = fails + 1
    printf "want != got:\n want: %v\n got:  %v\n" want got
end

func printResult
    printf "%2.f of %2.f tests passed\n" (total - fails) total
end

test
printResult
