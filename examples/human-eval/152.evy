// I think we all remember that feeling when the result of some long-awaited
// event is finally known. The feelings and thoughts you have at that moment
// are definitely worth noting down and comparing. Your task is to determine
// if a person correctly guessed the results of a number of matches. You are
// given two arrays of scores and guesses of equal length, where each index
// shows a match. Return an array of the same length denoting how far off
// each guess was. If they have guessed correctly, the value is 0, and if
// not, the value is the absolute difference between the guess and the
// score.
// example:
// compare [1 2 3 4 5 1] [1 2 3 4 2 -2] // [0 0 0 0 3 3]
// compare [0 5 0 0 0 4] [4 1 1 0 0 -2] // [4 4 1 0 0 6]
func compare:[]num scores:[]num guesses:[]num
    length := len scores
    result := [0] * length
    for i := range length
        result[i] = scores[i] - guesses[i]
        if result[i] < 0
            result[i] = -result[i]
        end
    end
    return result
end

func test
    assert [0 0 0 0 3 3] (compare [1 2 3 4 5 1] [1 2 3 4 2 -2])
    assert [0 0 0 0 0 0] (compare [0 0 0 0 0 0] [0 0 0 0 0 0])
    assert [2 4 6] (compare [1 2 3] [-1 -2 -3])
    assert [2 0 0 1] (compare [1 2 3 5] [-1 2 3 4])
end

// Test boilerplate
fails := 0
total := 0

func assert want:any got:any
    total = total + 1
    if want == got
        return
    end
    wantType := (typeof want)[:2]
    gotType := (typeof got)[:2]
    if (wantType == "[]" or wantType == "{}") and wantType == gotType and (len want) == 0 and (len got) == 0
        return
    end
    fails = fails + 1
    printf "want != got:\n want: %v\n got:  %v\n" want got
end

func printResult
    printf "%2.f of %2.f tests passed\n" (total - fails) total
end

test
printResult
