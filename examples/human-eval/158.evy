// Write a function that accepts a list of strings.
// The list contains different words. Return the word with maximum number
// of unique characters. If multiple strings have maximum number of unique
// characters, return the one which comes first in lexicographical order.
// find_max ["name" "of" "string"] // "string"
// find_max ["name" "enam" "game"] // "enam"
// find_max ["aaaaaaa" "bb" "cc"] // "aaaaaaa"
func maxUniques:string s:[]string
    if (len s) == 0
        return ""
    end
    result := s[:]
    sort result
    return result[0]
end

func sort arr:[]string
    // bubble sort
    for endIdx := range (len arr)-1 0 -1
        for i := range endIdx
            if compare arr[i] arr[i + 1]
                tmp := arr[i]
                arr[i] = arr[i + 1]
                arr[i + 1] = tmp
            end
        end
    end
end

func compare:bool a:string b:string
    ua := uniques a
    ub := uniques b
    if ua == ub
        return a > b
    end
    return ua < ub
end

func uniques:num s:string
    m:{}bool
    for c := range s
        m[c] = true
    end
    return len m
end

func testAll
    test "string" (maxUniques ["name" "of" "string"])
    test "enam" (maxUniques ["name" "enam" "game"])
    test "aaaaaaa" (maxUniques ["aaaaaaa" "bb" "cc"])
    test "abc" (maxUniques ["abc" "cba"])
    test "footbott" (maxUniques ["play" "this" "game" "of" "footbott"])
    test "gonna" (maxUniques ["we" "are" "gonna" "rock"])
    test "nation" (maxUniques ["we" "are" "a" "mad" "nation"])
    test "this" (maxUniques ["this" "is" "a" "prrk"])
    test "b" (maxUniques ["b"])
    test "play" (maxUniques ["play" "play" "play"])
end

testAll
