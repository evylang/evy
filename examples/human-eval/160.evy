// Given two lists operator, and operand. The first list has basic algebra
// operations, and the second list is a list of integers. Use the two given
// lists to build the algebraic expression and return the evaluation of this
// expression. The basic algebra operations:
// Addition ( + )
// Subtraction ( - )
// Multiplication ( * )
// Floor division ( // )
// Exponentiation ( ** )
// Example:
// operator = ["+" "*" "-"]
// array = [2 3 4 5]
// result = 2 + 3 * 4 - 5
// => result = 9
// Assumption: ** left associative.
// Note:
//     The length of operator list is equal to the length of operand list minus one.
//     Operand is a list of of non-negative integers.
//     Operator list has at least one operator, and operand list has at least two operands.
func solve:num ops:[]string nums:[]num
    arr := solveExp ops nums 0 0
    return arr[0]
end

precedence:{}num
precedence["+"] = 1
precedence["-"] = 1
precedence["*"] = 2
precedence["//"] = 2
precedence["**"] = 3

func solveExp:[]num ops:[]string nums:[]num idx:num prec:num
    left := nums[idx]
    while idx < (len ops) and prec < precedence[ops[idx]]
        op := ops[idx]
        result := solveExp ops nums idx+1 precedence[op] // recurse into right sub-tree
        left = solveOp left op result[0]
        idx = result[1]
    end
    return [left idx]
end

func solveOp:num a:num op:string b:num
    if op == "+"
        return a + b
    else if op == "-"
        return a - b
    else if op == "*"
        return a * b
    else if op == "//"
        return floor a/b
    else if op == "**"
        return pow a b
    end
    print "unknown op" op
    return -1
end

func testAll
    test 14 (solve ["+" "*"] [2 3 4])
    test 9 (solve ["+" "*" "-"] [2 3 4 5])
    test 8 (solve ["//" "*"] [7 3 4])
    test 7 (solve ["+" "*"] [1 2 3])
    test 5 (solve ["*" "+"] [1 2 3])
    test 14 (solve ["*" "+" "*"] [1 2 3 4])
    test 11 (solve ["+" "*" "+"] [1 2 3 4])
end

testAll
