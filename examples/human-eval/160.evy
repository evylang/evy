// Given two lists operator, and operand. The first list has basic algebra
// operations, and the second list is a list of integers. Use the two given
// lists to build the algebraic expression and return the evaluation of this
// expression. The basic algebra operations:
// Addition ( + )
// Subtraction ( - )
// Multiplication ( * )
// Floor division ( // )
// Exponentiation ( ** )
// Example:
// operator = ["+" "*" "-"]
// array = [2 3 4 5]
// result = 2 + 3 * 4 - 5
// => result = 9
// Assumption: ** left associative.
// Note:
//     The length of operator list is equal to the length of operand list minus one.
//     Operand is a list of of non-negative integers.
//     Operator list has at least one operator, and operand list has at least two operands.
func solve:num ops:[]string nums:[]num
    return solveExp ops nums 0
end

precedence:{}num
precedence["+"] = 1
precedence["-"] = 1
precedence["*"] = 2
precedence["//"] = 2
precedence["**"] = 3

func solveExp:num ops:[]string nums:[]num prec:num
    left := nums[0]
    while (len ops) != 0 and prec < precedence[ops[0]]
        op := ops[0]
        ops = ops[1:]
        nums = nums[1:]
        right := solveExp ops nums precedence[op]
        left = solveOp left op right
    end
    return left
end

func solveOp:num a:num op:string b:num
    if op == "+"
        return a + b
    else if op == "-"
        return a - b
    else if op == "*"
        return a * b
    else if op == "//"
        return floor a/b
    else if op == "**"
        return pow a b
    end
    print "unknown op" op
    return -1
end

func test
    assert 37 (solve ["**" "*" "+"] [2 3 4 5])
    assert 9 (solve ["+" "*" "-"] [2 3 4 5])
    assert 8 (solve ["//" "*"] [7 3 4])
    assert 7 (solve ["+" "*"] [1 2 3])
    assert 5 (solve ["*" "+"] [1 2 3])
    assert 14 (solve ["*" "+" "*"] [1 2 3 4])
    assert 11 (solve ["+" "*" "+"] [1 2 3 4])
end

// Test boilerplate
fails := 0
total := 0

func assert want:any got:any
    total = total + 1
    if want == got
        return
    end
    wantType := (typeof want)[:2]
    gotType := (typeof got)[:2]
    if (wantType == "[]" or wantType == "{}") and wantType == gotType and (len want) == 0 and (len got) == 0
        return
    end
    fails = fails + 1
    printf "want != got:\n want: %v\n got:  %v\n" want got
end

func printResult
    printf "%2.f of %2.f tests passed\n" (total - fails) total
end

test
printResult
