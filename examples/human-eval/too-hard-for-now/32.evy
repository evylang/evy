// Evaluates polynomial with coefficients xs at point x.
// return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n
func polyxs:num xs:[]num x:num
    print xs x
    return 0
end

// xs are coefficients of a polynomial.
// find_zero find x such that poly(x) = 0.
// find_zero returns only only zero point, even if there are many.
// Moreover, find_zero only takes list xs having even number of coefficients
// and largest non zero coefficient as it guarantees
// a solution.
// round(find_zero([1, 2]), 2) # f(x) = 1 + 2x // -0.5
// round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 // 1.0
func find_zero:num xs:[]num
    print xs
    // [begin end_ ] := [-1.0 1.0 ]
    // while .poly (xs begin) * .poly (xs end_) > 0
    //     begin = begin * 2.0
    //     end_ = end_ * 2.0
    // end
    // while end_ - begin > 1e-10
    //     center := begin + end_ / 2.0
    //     if .poly (xs center) * .poly (xs begin) > 0
    //         begin := center
    //         center
    //     else
    //         end_ := center
    //     end
    // end
    // return begin
    return 0
end

func test
    // rng := random.Random (42)
    //     ncoeff := 2 * rng.randint (1 4)
    //     coeffs := []
    //         coeff := rng.randint (-10 10)
    //         if coeff == 0
    //             coeff = 1
    //         end
    //         coeffs = coeffs + [coeff]
    //     end
    //     solution := .candidate (copy.deepcopy (coeffs))
    //     assert math.fabs (.poly (coeffs solution)) < 0.0001
    // end
end

// Test boilerplate
fails := 0
total := 0

func assert want:any got:any
    total = total + 1
    if want == got
        return
    end
    wantType := (typeof want)[:2]
    gotType := (typeof got)[:2]
    if (wantType == "[]" or wantType == "{}") and wantType == gotType and (len want) == 0 and (len got) == 0
        return
    end
    fails = fails + 1
    printf "want != got:\n want: %v\n got:  %v\n" want got
end

func printResult
    printf "%2.f of %2.f tests passed\n" (total - fails) total
end

test
printResult

