<h1>Upgrade Tools and Dependencies</h1>
<p>
  We attempt to upgrade tools and dependencies once a month. This upgrade process has four parts:
</p>
<ol>
  <li><a href="#upgrade-hermitised-tools">Upgrade Hermitised Tools</a></li>
  <li><a href="#upgrade-go-dependencies">Upgrade Go Dependencies</a></li>
  <li><a href="#upgrade-frontend-tools">Upgrade Frontend Tools</a></li>
  <li><a href="#upgrade-playwright">Upgrade Playwright</a></li>
</ol>
<p>
  Each step should follow in the listed order and be committed separately. Ensure
  <code>make ci</code> still passes before continuing with the next step.
</p>
<h2>
  <a id="upgrade-hermitised-tools" href="#upgrade-hermitised-tools" class="anchor">#</a>Upgrade
  Hermitised Tools
</h2>
<p>
  The tools used in this repository, such as Make, Go and Node, are automatically downloaded by
  <a href="https://cashapp.github.io/hermit/">Hermit</a> when needed. Hermit ensures that developers
  on Mac, Linux, and GitHub Actions CI use the same version of the same tools.
</p>
<p>To upgrade all tools managed by Hermit run</p>
<pre><code>hermit upgrade
</code></pre>
<p>Then run</p>
<pre><code>hermit search --exact TOOL
</code></pre>
<p>
  for tools you suspect might have major version bumps - node, firebase, openjre and goreleaser had
  them recently. Major version upgrades or uninterpretable version upgrades don't get installed
  automatically. If needed install specific versions manually with
</p>
<pre><code>hermit install TOOL-x.y.z
</code></pre>
<p>Commit changes and ensure the build still works with</p>
<pre><code>make ci
</code></pre>
<h2>
  <a id="upgrade-go-dependencies" href="#upgrade-go-dependencies" class="anchor">#</a>Upgrade Go
  Dependencies
</h2>
<p>Upgrade all Go package dependencies with</p>
<pre><code>go get -u ./...
go mod tidy
</code></pre>
<p>and the same again for the <code>evy/learn</code> sub-module</p>
<pre><code>go -C learn get -u ./...
go -C learn mod tidy
</code></pre>
<p>
  Verify that the Go version specified in the <code>go.mod</code> files matches the Go version that
  Hermit installs, which has potentially been upgraded in the prior step. If necessary, change the
  Go version in the <code>go.mod</code> files.
</p>
<p>Commit changes and ensure the build still works with</p>
<pre><code>make ci
</code></pre>
<h2>
  <a id="upgrade-frontend-tools" href="#upgrade-frontend-tools" class="anchor">#</a>Upgrade Frontend
  Tools
</h2>
<p>
  Upgrade other NPM frontend formatting and linting tools such as
  <a href="https://prettier.io/">prettier</a> or <a href="https://stylelint.io/">stylelint</a>. From
  the repository root directory run
</p>
<pre><code>cd .hermit/node/
npx -y npm-check-updates -u
npm install
</code></pre>
<p>Commit changes and ensure the build still works with</p>
<pre><code>make ci
</code></pre>
<h2>
  <a id="upgrade-playwright" href="#upgrade-playwright" class="anchor">#</a>Upgrade Playwright
</h2>
<h3>
  <a id="install-new-playwright-version" href="#install-new-playwright-version" class="anchor">#</a
  >Install new Playwright version
</h3>
<p>
  We use <a href="https://playwright.dev/">Playwright</a> for automated end-to-end and browser
  testing.
</p>
<p>From the repository root directory run</p>
<pre><code>cd e2e
npx -y npm-check-updates -u
npm install
npx playwright install
</code></pre>
<p>
  If a new version of Playwright has been installed, also update the Docker image version of
  Playwright used in Makefile and on CI.
</p>
<p>
  Find the correct Docker tag in the
  <a href="https://playwright.dev/docs/docker">Playwright Docker documentation</a>. Replace it in
  the Makefile, for example update:
</p>
<pre><code>PLAYWRIGHT_OCI_IMAGE = mcr.microsoft.com/playwright:v1.46.0-jammy
</code></pre>
<h3>
  <a
    id="ensure-end-to-end-tests-still-pass"
    href="#ensure-end-to-end-tests-still-pass"
    class="anchor"
    >#</a
  >Ensure end-to-end tests still pass
</h3>
<p>Start a local server in one terminal with</p>
<pre><code>make serve
</code></pre>
<p>Run end-to-end tests in another terminal with</p>
<pre><code>make e2e
</code></pre>
<p>
  If snapshot tests fail and you are certain that the snapshot-diffs are justified, update snapshots
  with
</p>
<pre><code>make snaps
</code></pre>
<p>
  The step above is only used for local development. To run Playwright with docker as GitHub Actions
  CI does use:
</p>
<pre><code>make e2e USE_DOCKER=1
</code></pre>
<p>if snapshots need updating run</p>
<pre><code>make snaps USE_DOCKER=1
</code></pre>
<p>
  If there are connection errors between Docker and the local development server, try starting the
  server with
</p>
<pre><code>make serve SERVEDIR_ALL_INTERFACES=1
</code></pre>
<p>Commit changes and ensure the build still works with</p>
<pre><code>make ci
</code></pre>
