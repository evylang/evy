<h1>Syntax by Example</h1>
<p>
  The following examples will help you understand the syntax of Evy. We also have a one page
  <a href="papers/evy-cheat-sheet.pdf">Cheat Sheet</a> that you can print and keep handy.
</p>
<p>
  For a more formal definition of the syntax, see the
  <a href="spec.html">Language Specification</a>. Built-in functions, such as <code>print</code> and
  <code>circle</code>, are documented in the <a href="builtins.html">Built-ins section</a>.
</p>
<h2><a id="comment" href="#comment" class="anchor">#</a>Comment</h2>
<pre><code class="language-evy">// This is a comment
</code></pre>
<h2><a id="declaration" href="#declaration" class="anchor">#</a>Declaration</h2>
<pre><code class="language-evy">x:num // or string, bool, any, []num, {}string
y := 1 // type inference (num)
print x y // 0 1
</code></pre>
<h2><a id="assignment" href="#assignment" class="anchor">#</a>Assignment</h2>
<pre><code class="language-evy">z:num
z = 5
print z // 5
</code></pre>
<h2><a id="expression" href="#expression" class="anchor">#</a>Expression</h2>
<p>Arithmetic, number expressions</p>
<pre><code class="language-evy">x := 5 * (3 + pi) - 2 / 7.6
print x // 30.44434210526316
</code></pre>
<p>Logical, boolean expressions</p>
<pre><code class="language-evy">trace := false
debug := true
level := &quot;error&quot;

b := !trace and debug or level == &quot;&quot;
print b // true
</code></pre>
<h2><a id="strings" href="#strings" class="anchor">#</a>Strings</h2>
<p>Concatenation, indexing and slicing</p>
<pre><code class="language-evy">str := &quot;abc&quot; + &quot;ü•™123&quot; // &quot;abcü•™123&quot; - concatenation
s2 := str[0] // &quot;a&quot; - indexing
s3 := str[1:5] // &quot;bcü•™1&quot; - slicing
print str s2 s3
</code></pre>
<p>Newline, indentation and escaping</p>
<pre><code class="language-evy">str := &quot;newline: \n indentation: \t&quot;
print str
print &quot;quotation mark : \&quot; &quot; // escaping
</code></pre>
<h2><a id="if-statements" href="#if-statements" class="anchor">#</a><code>if</code> statements</h2>
<pre><code class="language-evy">x := 6
if x &gt; 10
    print &quot;huge&quot;
else if x &gt; 5
    print &quot;medium&quot;
else
    print &quot;small&quot;
end
</code></pre>
<h3><a id="nested-if" href="#nested-if" class="anchor">#</a>Nested <code>if</code></h3>
<pre><code class="language-evy">str := &quot;abc&quot;
if (len str) &gt; 2
    if (startswith str &quot;a&quot;)
        print &quot;string starting with 'a'&quot;
    else
        print &quot;string not starting with 'a'&quot;
    end
else
    print &quot;single character or empty string&quot;
end
</code></pre>
<h2><a id="loop-statements" href="#loop-statements" class="anchor">#</a>Loop statements</h2>
<h3><a id="while-loop" href="#while-loop" class="anchor">#</a><code>while</code> loop</h3>
<pre><code class="language-evy">x := 0
while x &lt; 10
    print x // 0 1 2 ... 9
    x = x + 1
end
</code></pre>
<h3>
  <a id="for-range-number" href="#for-range-number" class="anchor">#</a><code>for</code> ‚Ä¶
  <code>range</code> number
</h3>
<pre><code class="language-evy">for x := range 5
    print x // 0 1 2 3 4
end

for x := range 5 10
    print x // 5 6 7 8 9
end

for x := range 1 10 2 // from to step
    print x // 1 3 5 7 9
end

for x := range -10
    print x // nothing. step is 1 by default.
end
</code></pre>
<h3>
  <a id="for-range-array" href="#for-range-array" class="anchor">#</a><code>for</code> ‚Ä¶
  <code>range</code> array
</h3>
<pre><code class="language-evy">for x := range [1 2 3]
    print x // 1 2 3
end
</code></pre>
<h3>
  <a id="for-range-map" href="#for-range-map" class="anchor">#</a><code>for</code> ‚Ä¶
  <code>range</code> map
</h3>
<pre><code class="language-evy">m := {name:&quot;Mali&quot; sport:&quot;climbing&quot;}
for key := range m
    print key m[key]
end
</code></pre>
<h3><a id="break" href="#break" class="anchor">#</a><code>break</code></h3>
<pre><code class="language-evy">x := 0
while true
    print &quot;tick... &quot;
    sleep 1
    if x &gt; 2
        print &quot;üí•&quot;
        break // breaks out of the innermost loop
    end
    x = x + 1
end
</code></pre>
<h2>
  <a id="function-definition" href="#function-definition" class="anchor">#</a>Function definition
</h2>
<pre><code class="language-evy">func add:num a:num b:num
    return a + b
end
</code></pre>
<h3><a id="no-return-type" href="#no-return-type" class="anchor">#</a>No return type</h3>
<pre><code class="language-evy">func foxprint s:string
    print &quot;ü¶ä &quot;+s
end
</code></pre>
<h3><a id="variadic" href="#variadic" class="anchor">#</a>Variadic</h3>
<pre><code class="language-evy">func list args:any...
    for arg := range args[:-1]
        printf &quot;%v, &quot; arg
    end
    printf &quot;%v&quot; args[-1]
end
</code></pre>
<h3><a id="function-calls" href="#function-calls" class="anchor">#</a>Function calls</h3>
<pre><code class="language-evy">n := add 1 2
print n // 3
foxprint &quot;üêæ&quot; // ü¶ä üêæ
list 2 true &quot;blue&quot; // [2 true blue]

// previous function definitions
func add:num a:num b:num
    return a + b
end

func foxprint s:string
    print &quot;ü¶ä &quot;+s
end

func list args:any...
    print args
end
</code></pre>
<h2><a id="array" href="#array" class="anchor">#</a>Array</h2>
<p>Typed declaration</p>
<pre><code class="language-evy">a1:[]num
a2:[][]string
a1 = [1 2 3 4] // type: num[]
a2 = [[&quot;1&quot; &quot;2&quot;] [&quot;a&quot; &quot;b&quot;]] // type: string[][]
print a1 a2
</code></pre>
<p>Declaration with inference</p>
<pre><code class="language-evy">a1 := [true false] // type: bool[]
a2 := [&quot;s1&quot; // line break allowed
    &quot;s2&quot;] // type: string[]
print a1 a2
</code></pre>
<p><code>any</code> arrays</p>
<pre><code class="language-evy">a1:[]any
a2 := [&quot;chars&quot; 123] // type: any[]
print a1 a2
</code></pre>
<h3>
  <a id="array-element-access" href="#array-element-access" class="anchor">#</a>Array element access
</h3>
<pre><code class="language-evy">a1 := [1 2 3 4]
a2 := [[&quot;1&quot; &quot;2&quot;] [&quot;a&quot; &quot;b&quot;]]
print a1[1] // 2
print a2[1][0] // &quot;a&quot;
print a1[-1] // 4
</code></pre>
<h3><a id="concatenation" href="#concatenation" class="anchor">#</a>Concatenation</h3>
<pre><code class="language-evy">a := [1 2 3 4]
a = a + [100] // [1 2 3 4 100]; optional extra whitespace
a = [0] + a + [101 102] // [0 1 2 3 4 100 101 102]
</code></pre>
<h3><a id="repetition" href="#repetition" class="anchor">#</a>Repetition</h3>
<pre><code class="language-evy">a := [0] * 5 // [0 0 0 0 0]
a = [1 2] * 2 + a + [3] * 3 // [1 2 1 2 0 0 0 0 0 3 3 3]
n := 3
b := [&quot;hello&quot;] * n
print b // [&quot;hello&quot; &quot;hello&quot; &quot;hello&quot;]
</code></pre>
<h3><a id="slicing" href="#slicing" class="anchor">#</a>Slicing</h3>
<pre><code class="language-evy">a := [1 2 3]
b := a[:2] // [1 2]
b = a[1:2] // [2]
b = a[-2:] // [2 3]
</code></pre>
<h2><a id="map" href="#map" class="anchor">#</a>Map</h2>
<p>Any map</p>
<pre><code class="language-evy">m:{}any // keys used in literals or with `.` must be identifiers.
m.name = &quot;fox&quot;
m.age = 42
m[&quot;key with space&quot;] = &quot;üîëü™ê&quot;
print m // {name:fox age:42 key with space:üîëü™ê}
</code></pre>
<p>Typed map</p>
<pre><code class="language-evy">m1 := {letters:&quot;abc&quot; name:&quot;Jill&quot;} // type: {}string
m2 := {
    letters:&quot;abc&quot; // line break allowed
    name:&quot;Jill&quot;
}
print m1 m2
</code></pre>
<p>Empty map</p>
<pre><code>m1:{}string // {}string
m2 := {} // {}any
print m1 m2 // {} {}
</code></pre>
<p>Nested map</p>
<pre><code>m1:{}[]num
m2 := {a:{}}
print m1 m2 // {} {a:{}}
</code></pre>
<h3><a id="map-value-access" href="#map-value-access" class="anchor">#</a>Map value access</h3>
<pre><code class="language-evy">m := {letters:&quot;abc&quot; name:&quot;Jill&quot;}
s := &quot;letters&quot;
print m.letters // abc
print m[s] // abc
print m[&quot;letters&quot;] // abc
</code></pre>
<h2><a id="any" href="#any" class="anchor">#</a><code>any</code></h2>
<p>Zero value of any is <code>false</code>.</p>
<pre><code class="language-evy">x:any
m1:{}any
m2 := {letter:&quot;a&quot; number:1} // {}any
print x m1 m2 // false {} {letter:a number:1}

a1:[]any
a2 := [&quot;b&quot; 2] // []any
print a1 a2 // [] [b 2]
</code></pre>
<h2>
  <a id="type-inspection-with-typeof" href="#type-inspection-with-typeof" class="anchor">#</a>Type
  inspection with <code>typeof</code>
</h2>
<pre><code class="language-evy">print (typeof &quot;abc&quot;) // &quot;string&quot;
print (typeof true) // &quot;bool&quot;
print (typeof [1 2]) // &quot;[]num&quot;
print (typeof [[1 2] [3 4]]) // &quot;[][]num&quot;
</code></pre>
<h2><a id="type-assertion" href="#type-assertion" class="anchor">#</a>Type assertion</h2>
<pre><code class="language-evy">x:any
print x (typeof x) // flase bool
x = [1 2 3 4]
s := x.([]num) // type assertion
print s (typeof s) // [1 2 3 4] []num
</code></pre>
<h2>
  <a id="type-inspection-and-assertion" href="#type-inspection-and-assertion" class="anchor">#</a
  >Type inspection and assertion
</h2>
<pre><code class="language-evy">v:any
v = &quot;üêê&quot;
if (typeof v) == &quot;string&quot;
    s := v.(string) // type assertion
    print s+s // üêêüêê
end
</code></pre>
<h2><a id="event-handling" href="#event-handling" class="anchor">#</a>Event handling</h2>
<pre><code class="language-evy">on key k:string
    print &quot;key:&quot; k
end
</code></pre>
<p>
  Evy can only handle a limited set of events, such as key presses, pointer movements, or periodic
  screen redraws.
</p>
