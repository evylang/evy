<h1>ü•ß Monte Carlo üíï œÄ</h1>
<h2>‚≠ê Introduction</h2>
<p>
  This lab shows how to estimate the mathematical constant <strong>œÄ</strong> (pi) using a
  <strong>Monte Carlo algorithm</strong>.
</p>
<ul>
  <li>What do you know about <strong>œÄ</strong>?</li>
  <li>Do you know the <strong>area</strong> of a circle with radius <code>1</code>?</li>
</ul>
<details>
  <summary>Docs</summary>
  <p>
    A <strong>Monte Carlo algorithm</strong> is a computer program that simulates the behavior of
    other systems. It's not a method that gives you a perfectly precise answer, but rather an
    approximate one, often relying on <strong>randomness</strong> and <strong>statistics</strong> to
    reach a result. The more times you run it, the closer you get to the true answer.
  </p>
</details>
<p><button class="next-btn">Next</button></p>
<h2>‚≠ê Quarter circle</h2>
<p><img src="samples/ifs/img/quarter-circle.svg" alt="quarter circle" /></p>
<p>
  What's the <strong>area</strong> of the red <strong>quarter-circle</strong> if the radius is
  <code>1</code>? Can you estimate it to the nearest tenth?
</p>
<p>
  What's the total <strong>area</strong> of the <strong>square</strong> (including both the red and
  black areas)?
</p>
<p>
  If we place a dot <strong>randomly</strong> within the square, what's the
  <strong>probability</strong> it will land inside the red quarter-circle? Does your answer make
  sense visually?
</p>
<details>
  <summary>Hint</summary>
  <ul>
    <li>
      <p>
        <strong>Square Area:</strong> If the width of the square is <code>1</code>, its area is
        <code>1 * 1 = 1</code>.
      </p>
    </li>
    <li>
      <p>
        <strong>Circle Area:</strong> The area of a circle with radius <code>1</code> is
        <code>r¬≤œÄ</code> or <code>r * r * œÄ</code>, so that's <code>1 * 1 * œÄ = œÄ</code>.
      </p>
    </li>
    <li>
      <p>
        <strong>Quarter Circle Area:</strong> The red quarter-circle's area is one-fourth of the
        full circle with radius 1, so it's <code>œÄ / 4</code>, which is approximately
        <code>0.8</code>.
      </p>
    </li>
    <li>
      <p>
        <strong>Probability:</strong> The probability of a random point landing inside the red
        quarter-circle is the ratio of the quarter-circle's area to the square's area:
        <code>(œÄ / 4) / 1 = œÄ / 4</code>. This is about <code>0.8</code>, which seems visually
        reasonable.
      </p>
    </li>
    <li>
      <p>
        <strong>Estimating œÄ:</strong> This means if we randomly place many dots within the square,
        assuming a truly random distribution, we should expect roughly
        <code>(œÄ / 4) * 100</code> percent of those dots to fall inside the quarter circle. The more
        dots we place, the more precise our estimate of œÄ should become. Let's put this theory to
        the test!
      </p>
    </li>
  </ul>
</details>
<p><button class="next-btn">Next</button></p>
<h2>‚≠ê Draw a Red Quarter Circle</h2>
<p>
  Modify the code on the right to draw <code>&quot;red&quot;</code> dots for points inside the
  quarter-circle, just like in the image above.
</p>
<p>
  Use the <a href="/docs/builtins.html#sqrt"><code>sqrt</code></a> function to calculate the
  distance from each dot to the circle's center at <code>0 0</code>.
</p>
<p>
  The distance from the circle's center at <code>0 0</code> to any point <code>x y</code> is
  calculated using the Pythagorean theorem <code>a¬≤ + b¬≤ = c¬≤</code>:
</p>
<pre><code class="language-evy">c := sqrt a*a+b*b
</code></pre>
<p><img src="samples/ifs/img/quarter-circle-triangle.svg" alt="quarter circle" /></p>
<p>
  If this distance is less than or equal to <code>1</code>, the point lies within the quarter-circle
  and should be colored red. (Remember, we're scaling <code>x</code> and <code>y</code> by 100 when
  positioning the dots, as the Evy canvas is 100 by 100.)
</p>
<details>
  <summary>Hint</summary>
  <p>
    Add the following code inside the loop after declaring <code>x</code> and <code>y</code> and
    before drawing the circle.
  </p>
  <pre><code class="language-evy">d := sqrt x*x+y*y
if d &lt;= 1
    color &quot;red&quot;
else
    color &quot;black&quot;
end
</code></pre>
</details>
<p><button class="next-btn">Next</button></p>
<h2>‚≠ê Estimate œÄ</h2>
<p>Can you calculate œÄ by tallying up red dots and black dots?</p>
<p>
  We know the total number of points is <code>i</code>. Let's count the
  <code>&quot;red&quot;</code> dots in the variable <code>reds</code>. We'll then calculate the
  ratio of <code>reds / i</code> and multiply by <code>4</code> to get an estimate of œÄ.
</p>
<details>
  <summary>Hint</summary>
  <p>At the top of your code, add:</p>
  <pre><code class="language-evy">reds := 0
</code></pre>
  <p>Inside the <code>if d &lt;= 1</code> condition, add:</p>
  <pre><code class="language-evy">if d &lt;= 1
  color &quot;red&quot;
  reds = reds + 1
else // ...
</code></pre>
  <p>And at the bottom of the loop, add:</p>
  <pre><code class="language-evy">while // ...
  // ...
  piCalc := reds / i * 4
  cls // clears the text output
  print &quot;Calculated Pi:&quot; piCalc
  print &quot;Builtin Pi:   &quot; pi
end
</code></pre>
</details>
