// x - bot
// o - human

play_game "x" (select_strength)

func select_strength:num
    print "Select strength 1-3."
    while true
        str := read
        n := str2num str
        if !err and n >= 1 and n <= 3
            printf "Strength %0.f\n\n" n
            return n
        end
        printf "ðŸ’£ %q is not a valid strength (1-3). Try again.\n" str
    end
    return -1
end

func play_game turn:string strength:num
    print "Enter index of \"o\" move:"
    print "0 1 2"
    print "3 4 5"
    print "6 7 8\n"

    board := new_board
    while !(is_gameover board)
        if turn == "x"
            bot_turn board strength
        else
            human_turn board
        end
        print_board board
        turn = next turn
    end
    result := winner board
    if result == "."
        print "Tie."
    else
        printf "%q wins.\n" result
    end
end

func new_board:[]string
    return [
        "." "." "."
        "." "." "."
        "." "." "."
    ]
end

func is_gameover:bool b:[]string
    return (empty_cnt b) == 0 or (winner b) != "."
end

func next:string turn:string
    if turn == "o"
        return "x"
    end
    return "o"
end

func empty_cnt:num b:[]string
    cnt := 0
    for i := range 9
        if b[i] == "."
            cnt = cnt + 1
        end
    end
    return cnt
end

func winner:string b:[]string
    if b[0] != "." and ((b[1] == b[0] and b[2] == b[0]) or (b[4] == b[0] and b[8] == b[0]) or (b[3] == b[0] and b[6] == b[0]))
        return b[0]
    end
    if b[4] != "." and ((b[1] == b[4] and b[7] == b[4]) or (b[3] == b[4] and b[5] == b[4]) or (b[2] == b[4] and b[6] == b[4]))
        return b[4]
    end
    if b[8] != "." and ((b[6] == b[8] and b[7] == b[8]) or (b[2] == b[8] and b[5] == b[8]))
        return b[8]
    end
    return "." // no winner
end

func print_board b:[]string
    print b[0] b[1] b[2]
    print b[3] b[4] b[5]
    print b[6] b[7] b[8]
    print
end

func human_turn b:[]string
    while true
        str := read
        n := str2num str
        if !err and n <= 8 and n >= 0 and b[n] == "."
            b[n] = "o"
            return
        end
        printf "ðŸ’£ %q is not a valid move (0-8, free fields). Try again.\n" str
    end
end

func bot_turn b:[]string strength:num
    if strength == 1
        bot1_turn b
    else if strength == 2
        bot2_turn b
    else
        bot3_turn b
    end
end

func bot1_turn b:[]string
    target := rand (empty_cnt b)
    cnt := 0
    for i := range 9
        if b[i] == "."
            if target == cnt
                b[i] = "x"
                return
            end
            cnt = cnt + 1
        end
    end
end

func bot2_turn b:[]string
    // try to win in next move
    for i := range 9
        if b[i] == "."
            b[i] = "x"
            if (winner b) == "x"
                return
            end
            b[i] = "."
        end
    end
    // try to stop "o" from winning in next move
    for i := range 9
        if b[i] == "."
            b[i] = "o"
            if (winner b) == "o"
                b[i] = "x"
                return
            end
            b[i] = "."
        end
    end
    // random move if no win or block possible
    bot1_turn b
end

func bot3_turn b:[]string
    e := empty_cnt b
    if e == 9
        bot1_turn b
    else if e == 8 and b[4] == "."
        b[4] = "x"
    else if e == 8 // "o" on 4
        corners := [0 2 6 8]
        i := corners[rand 4]
        b[i] = "x"
    else
        minmax b "x" 0
    end
end

func minmax:num b:[]string turn:string depth:num
    if (is_gameover b)
        return score b depth
    end
    scores:[]num
    moves:[]num
    b2 := b[:]
    turn2 := next turn
    for i := range 9
        if b[i] == "."
            b2[i] = turn
            scores = scores + [(minmax b2 turn2 depth+1)]
            moves = moves + [i]
            b2[i] = "."
        end
    end

    idx:num
    if turn == "x"
        idx = max_index scores
    else
        idx = min_index scores
    end
    if depth == 0
        b[moves[idx]] = turn
    end
    return scores[idx]
end

func score:num b:[]string depth:num
    w := winner b
    if w == "x"
        return 10 - depth
    else if w == "o"
        return -10 + depth
    end
    return 0
end

func min_index:num nums:[]num
    nmin := nums[0]
    idx := 0
    for i := range 1 (len nums)
        if nums[i] < nmin
            nmin = nums[i]
            idx = i
        end
    end
    return idx
end

func max_index:num nums:[]num
    nmax := nums[0]
    idx := 0
    for i := range 1 (len nums)
        if nums[i] > nmax
            nmax = nums[i]
            idx = i
        end
    end
    return idx
end
